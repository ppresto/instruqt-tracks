locals {
  svc_name = "hw-kv"
  svc_definition_kv_path = "service/${local.svc_name}/service.json"
}

#
#  Service ALB
#
resource "aws_alb" "lb_1" {
  name               = "alb-hc-http" # Naming our load balancer
  load_balancer_type = "application"
  subnets = data.terraform_remote_state.vpc.outputs.public_subnets
  # Referencing the security group
  security_groups = ["${module.ecs-cluster.sg_ecs_id}"]
}
resource "aws_lb_target_group" "lb_tg_1" {
  name        = "alb-tg-hc-http"
  port        = 80
  protocol    = "HTTP"
  target_type = "ip"
  vpc_id      = data.terraform_remote_state.vpc.outputs.vpc_id
  health_check {
    matcher = "200,301,302"
    path = "/"
    #healthy_threshold   = "3"
    #interval            = "10"
    #protocol            = "HTTP"
    #unhealthy_threshold = "3"
  }
}
resource "aws_lb_listener" "listener_1" {
  load_balancer_arn = "${aws_alb.lb_1.arn}" # Referencing our load balancer
  port              = "80"
  protocol          = "HTTP"
  default_action {
    type             = "forward"
    target_group_arn = "${aws_lb_target_group.lb_tg_1.arn}" # Referencing our tagrte group
  }
}

resource "aws_ecs_task_definition" "hw-kv" {
family                   = "hw-kv"
requires_compatibilities = ["EC2"]
network_mode             = "awsvpc"    # Using awsvpc as our network mode as this is required for Fargate
memory                   = 512         # Specifying the memory our container requires
cpu                      = 256         # Specifying the CPU our container requires
execution_role_arn       = "${module.ecs-cluster.ecs_instance_role_arn}"
task_role_arn            = "${module.ecs-cluster.ecs_instance_role_arn}"
container_definitions    = <<DEFINITION
  [
    {
      "name": "hw-kv",
      "image": "ppresto/helloworld",
      "essential": true,
      "logConfiguration": {
        "logDriver": "awslogs",
        "options": {
          "awslogs-group": "app-logs",
          "awslogs-region": "${var.aws_region}",
          "awslogs-stream-prefix": "hw-kv"
        }
      },
      "portMappings": [
        {
          "containerPort": 80,
          "hostPort": 80,
          "protocol": "tcp"
        }
      ],
      "memory": 512,
      "cpu": 256
    },
    {
      "image": "ppresto/consul-ecs:1.9.3-1.16.0-5",
      "name": "hw-kv-init",
      "essential": false,
      "logConfiguration": {
        "logDriver": "awslogs",
        "options": {
          "awslogs-group": "app-logs",
          "awslogs-region": "${var.aws_region}",
          "awslogs-stream-prefix": "hw-kv-init"
        }
      },
      "portMappings": [
          {
              "protocol": "tcp",
              "containerPort": 21000
          }
      ],
      "environment": [
          {
              "name": "SERVICE_NAME",
              "value": "${local.svc_name}"
          },
          {
              "name": "CONSUL_SERVICE",
              "value": "true"
          },
          {
              "name": "SERVICE_PORT",
              "value": "80"
          },
          {
              "name": "CONSUL_SERVICE_KV_PATH",
              "value": "${local.svc_definition_kv_path}"
          }
      ]
    }
  ]
  DEFINITION
}

resource "aws_ecs_service" "hw_kv_svc" {
  name            = "hw_kv_svc"
  cluster         = "${module.ecs-cluster.cluster_id}"
  task_definition = "${aws_ecs_task_definition.hw-kv.arn}"
  launch_type     = "EC2"
  desired_count   = 1
  deployment_minimum_healthy_percent = 0

  load_balancer {
    target_group_arn = "${aws_lb_target_group.lb_tg_1.arn}" # Referencing our target group
    container_name   = "${aws_ecs_task_definition.hw-kv.family}"
    container_port   = 80 # Specifying the container port
  }

  network_configuration {
    subnets         = data.terraform_remote_state.vpc.outputs.public_subnets
    assign_public_ip = false
    security_groups  = [aws_security_group.consul_svc.id, aws_security_group.consul_ecs_lb.id]
  }
  depends_on              = ["aws_lb_listener.listener_1","consul_keys.app"]
}

resource "consul_keys" "app" {
  datacenter = var.aws_region
  token      = data.terraform_remote_state.consul.outputs.master_token

  # Set the CNAME of our load balancer as a key
  key {
    path  = local.svc_definition_kv_path
    value    = <<VALUE
    {
    "service": {
      "name": "hw-kv",
      "id": "hw-kv",
      "token": "",
      "address": "CONTAINER_IP",
      "port": 80,
      "tags": [
        "ecs",
        "hw-kv",
        "dev"
      ],
      "meta": {
        {{ range tree "meta" }}
        "{{ .Key }}":"{{ .Value }}",
        {{ end }}
        "meta":"auto-generated-v1"
      },
      "check": {
        "http": "http://CONTAINER_IP:80/",
        "method": "GET",
        "interval": "5s",
        "timeout": "1s",
        "DeregisterCriticalServiceAfter": "1m"
      }
    }
  }
  VALUE
  }
}
resource "aws_ecs_task_definition" "helloworld" {
  family                   = "helloworld"
  requires_compatibilities = ["EC2"]
  network_mode             = "awsvpc"    # Using awsvpc as our network mode as this is required for Fargate
  memory                   = 512         # Specifying the memory our container requires
  cpu                      = 256         # Specifying the CPU our container requires
  execution_role_arn       = "${module.ecs-cluster.ecs_instance_role_arn}"
  task_role_arn            = "${module.ecs-cluster.ecs_instance_role_arn}"
  container_definitions    = <<DEFINITION
  [
    {
      "name": "helloworld",
      "image": "ppresto/helloworld",
      "essential": true,
      "logConfiguration": {
        "logDriver": "awslogs",
        "options": {
          "awslogs-group": "app-logs",
          "awslogs-region": "${var.aws_region}",
          "awslogs-stream-prefix": "ecs"
        }
      },
      "portMappings": [
        {
          "containerPort": 80,
          "hostPort": 80,
          "protocol": "tcp"
        }
      ],
      "memory": 512,
      "cpu": 256
    },
    {
      "image": "ppresto/consul-ecs:1.9.3-1.16.0",
      "name": "http-proxy",
      "essential": false,
      "portMappings": [
          {
              "protocol": "tcp",
              "containerPort": 21000
          }
      ],
      "environment": [
          {
              "name": "SERVICE_NAME",
              "value": "http"
          },
          {
              "name": "SERVICE_PORT",
              "value": "80"
          },
          {
              "name": "CONSUL_SERVICE",
              "value": "true"
          },
          {
              "name": "SERVICE_HEALTH_CHECK_PATH",
              "value": "/"
          }
      ]
    }
  ]
  DEFINITION
}

resource "aws_ecs_service" "helloworld_svc" {
  name            = "helloworld_svc"
  cluster         = "${module.ecs-cluster.cluster_id}"
  task_definition = "${aws_ecs_task_definition.helloworld.arn}"
  launch_type     = "EC2"
  desired_count   = 1

  load_balancer {
    target_group_arn = "${aws_lb_target_group.ecs_tg.arn}" # Referencing our target group
    container_name   = "${aws_ecs_task_definition.helloworld.family}"
    container_port   = 80 # Specifying the container port
  }

  network_configuration {
    subnets         = data.terraform_remote_state.vpc.outputs.public_subnets
    assign_public_ip = false
    security_groups  = [aws_security_group.consul_svc.id, aws_security_group.consul_ecs_lb.id]
  }
  depends_on              = ["aws_lb_listener.listener"]
}
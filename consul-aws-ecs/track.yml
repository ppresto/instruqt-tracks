slug: consul-aws-ecs-poc
id: enlpvazu1tqe
type: track
title: Consul Enterprise on AWS
teaser: Use Consul's central service registry and discovery for services on ECS EC2.
description: In this track you will set up a Consul shared service on AWS, and connect
  EC2 and ECS applications.
icon: https://storage.googleapis.com/instruqt-frontend/assets/hashicorp/tracks/consul.png
tags: []
owner: hashicorp
developers:
- ppresto@hashicorp.com
private: true
published: false
show_timer: true
challenges:
- slug: provision-consul
  id: uyjxdvqk2pbc
  type: challenge
  title: Provision infrastructure with Terraform
  teaser: Create an immutable Consul environment using Packer and Terraform
  assignment: |-
    You can think of the Cloud CLI terminal as your laptop machine preloaded
    with your AWS access credentials. <br>
    At any time you can use the AWS CLI and console to view your environment. <br>

    During startup we pre-built a default and custom VPC (10.0.0.0/16) to speed things up.  Lets verify it was built properly.
    ```
    aws ec2 describe-vpcs | jq -r '.Vpcs[].CidrBlock'
    ```
    You can review the terraform code for this vpc in /root/vpc if you want.

    Next, make sure the immutable image we created in the background is available.  Terraform
    will use this image in the next step.
    ```
    aws ec2 describe-images --region ${AWS_REGION} \
    --filters "Name=tag:Owner,Values=ppresto@hashicorp.com" \
    --output text
    ```
    This image was created using Packer.  Review this for additional details:
    `/root/packer/consul/run-linux.sh`.

    # Provision Consul
    Lets use Terraform to provision a NLB, and ASG using the immutable
    packer image above so we can support now downtime changes and upgrades.
    ```
    cd /root/consul
    terraform init
    terraform apply -auto-approve
    ```
    While Terraform is provisiong this infrastructure lets take a look at the `terraform` tab and
    review `main.tf`. <br>

    You should see green terraform outputs if everything builds successfully.  Copy the `dns_name` value and put this into a new browser
    tab to access the consul UI.
    ```
    terraform output dns_name
    ```
    `Note`: The UI shows consul and snapshot services
    along with an ec2 bastion host that consul discovered
    The ssh details to the host are available in the terraform output
    if you want to review the client configuration.
  notes:
  - type: text
    contents: |-
      In this assignment you will familiarize yourself with the AWS cloud
      environment, and provision consul.
  tabs:
  - title: Cloud CLI
    type: terminal
    hostname: cloud-client
  - title: Cloud Consoles
    type: service
    hostname: cloud-client
    path: /
    port: 80
  - title: Current lab setup
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/ppresto/instruqt-tracks/master/consul-aws-ecs/assets/diagrams/03-provision-consul.html
  - title: Terraform
    type: code
    hostname: cloud-client
    path: /root/consul
  difficulty: basic
  timelimit: 1800
- slug: build-consul-ecs-agent
  id: dmteuxtrwst0
  type: challenge
  title: Build Consul service registration image
  teaser: To register our ECS services we need to use an init docker container
  assignment: |-
    To host this container you will need a [dockerhub account](https://hub.docker.com/).
    If you dont already have one sign up for a free account now. <br>

    # Update DockerID
    Go to the `Code` tab or use vi to edit file: `Makefile`.
    Replace the DOCKER_ID (ex: ppresto) with your docker account name and save the file.

    # Docker Login
    Go to the `Docker` tab  and login to your dockerhub account.
    ```
    docker login
    ```

    # Build and Push Image
    ```
    make build
    make push
    ```
    *Note*: Copy your full image REPOSITORY:TAG for the next challenge.
    ```
    docker images --format "table {{.Repository}}:{{.Tag}}" | grep -v envoyproxy
    ```
  notes:
  - type: text
    contents: In this challenge you will build an init/sidecar image used to register
      services to consul.
  tabs:
  - title: Docker
    type: terminal
    hostname: vm
  - title: Cloud Consoles
    type: service
    hostname: cloud-client
    path: /
    port: 80
  - title: Code
    type: code
    hostname: vm
    path: /root/consul-ecs-agent
  difficulty: basic
  timelimit: 1800
- slug: build-ecs-cluster
  id: vdd2lma8ryhh
  type: challenge
  title: Provision ECS Cluster on EC2
  teaser: Use Terraform to provision an ECS Cluster and deploy Hashicups micro-servies
  assignment: |-
    # my.auto.tfvars
    In the Code tab verify `my.auto.tfvars` is setting consul_ecs_agent_image_name
    to your image repository:tag name.  If you forgot this go to the docker tab and run "docker images".
    Optionally, modify your cluster_name.

    # Provision the ECS Cluster
    ```
    terraform init
    terraform apply -auto-approve
    ```

    # Login to AWS Consoles
    Go to the Cloud Consoles Tab while you wait for the cluster to provision
    * Copy the `Username` by clicking on the copy icon to the right
    * Click on the `Account ID` to bring up a new browser tab and copy the username into the Login page
    * Copy the `Password` by clicking on the copy icon to the right and enter it into the Login page

    Once logged in bring up tabs for ECS, Cloudwatch, and anything else you want to monitor as the ECS cluster is provisioned and Hashicup services deployed.
    To review all task logs in Cloudwatch go to Logs -> Log groups -> applogs.  Creating the ECS instance and deploying services usually takes a couple minutes so please be patient.

    # Order coffee from Hashicups
    To go to the web application review the terraform output, look for the ALB URL for the frontend, and copy/paste in a new browser tab.
    ```
    terraform output alb_hc_frontend
    ```
    You should see the Hashicups application load and be able to order a Packer Spiced Latte!
  notes:
  - type: text
    contents: |-
      In this assignment you will build an immutable image of Consul with [HashiCorp Packer](https://packer.io/). <br>

      Immutability has many advantages for infrastructure management.
      Consul Enterprise can take advantage of immutable patterns with [Automated Upgrades](https://www.consul.io/docs/enterprise/upgrades/index.html).
  tabs:
  - title: Terminal
    type: terminal
    hostname: cloud-client
  - title: Code
    type: code
    hostname: cloud-client
    path: /root/ecs
  - title: Cloud Consoles
    type: service
    hostname: cloud-client
    path: /
    port: 80
  - title: Docker
    type: terminal
    hostname: vm
  difficulty: basic
  timelimit: 1800
- slug: sandbox
  id: abnujsmdzczv
  type: challenge
  title: Consul Sanbox
  teaser: Use this sandbox to test various Consul use cases.
  assignment: Please go back and stop the track once you are done to free up resources.
  notes:
  - type: text
    contents: In this assignment, you are free to do your own consul validation. <br>
  tabs:
  - title: Code
    type: code
    hostname: cloud-client
    path: /root
  - title: Cloud CLI
    type: terminal
    hostname: cloud-client
  - title: Cloud Consoles
    type: service
    hostname: cloud-client
    path: /
    port: 80
  difficulty: basic
  timelimit: 1800
checksum: "14356540405184356325"

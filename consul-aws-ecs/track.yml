slug: consul-aws-ecs-poc
id: enlpvazu1tqe
type: track
title: POV Shutterfly - Consul on AWS
teaser: Use Consul's central service registry and discovery for services running on
  ECS and EC2.
description: |-
  You will use Terraform to automatically setup a VPC, and NLB + ASG managed Consul Enterprise cluster
  using Hashicorp best practices.

  Then using your docker account, build a single sidecar container that can
  support both Consul service discovery and service mesh with envoy.

  All services will be registered with general service and dynamic runtime metadata.

  Finally using Terraform you will provision an ASG managed ECS cluster
  and deploy Hashicups (4 microservices) via ECS Tasks.

  The frontend service with be automatically available through an ALB.
  All microservices will be configured to leverage Consul's DNS interface to discover and route east/west traffic.
icon: https://storage.googleapis.com/instruqt-frontend/assets/hashicorp/tracks/consul.png
tags: []
owner: hashicorp
developers:
- ppresto@hashicorp.com
private: true
published: true
show_timer: true
challenges:
- slug: provision-consul
  id: uyjxdvqk2pbc
  type: challenge
  title: Provision infrastructure with Terraform
  teaser: Create an immutable Consul architecture from scratch.  Using Packer and
    Terraform provision a VPC, NLB, and ASG to automatically manage the Consul cluster.
  assignment: |-
    You can think of the Cloud CLI terminal as your laptop machine preloaded
    with your AWS access credentials. <br>
    At any time you can use the AWS CLI and console to view your environment. <br>

    # Validate Environment
    During startup we pre-built a default and custom VPC (10.0.0.0/16) to speed things up.  Lets verify it was built properly.
    ```
    aws ec2 describe-vpcs | jq -r '.Vpcs[].CidrBlock'
    ```
    You can review the terraform code for this vpc in /root/vpc if you want.

    Next, make sure the packer AMI image we created in the background is available.  Terraform
    will use this in the launch configuration of the ASG.  This AMI can sometimes take a minute so try again if you dont get a response initially.
    ```
    aws ec2 describe-images --region ${AWS_REGION} \
    --filters "Name=tag:Owner,Values=ppresto@hashicorp.com" \
    --output text
    ```
    *Note*: This image enables us to have an immutable design.
    Consul autopilot is an Enterprise feature that will allow us to deploy new consul nodes
    with an updated AMI or just a standard configuration update and once the new cluster nodes have replicated all data
    and considered healthy autopilot will safely drain the old nodes.  This enables us to make changes
    or upgrades to consul with no downtime just like a blue/green deployment.

    For additional details reference:
    ```
    /root/packer/consul
    /root/packer/consul/run-linux.sh
    ```
    If you're new to Packer its 100% open source.  Take a look at https://www.packer.io/

    # Provision Consul
    Use Terraform to provision a NLB, and ASG using the immutable
    packer image above so we can support now downtime changes and upgrades.
    ```
    cd /root/consul
    terraform init
    terraform apply -auto-approve
    ```
    While Terraform is provisiong this infrastructure lets take a look at the `terraform` tab and
    review `main.tf`. This code is leveraging our implementation services team's terraform module.

    # Load the Consul UI
    Copy the `dns_name` value from the terraform outputs and put this into a new browser tab to see the consul UI.
    ```
    terraform output dns_name
    ```
    The UI shows consul and snapshot services
    along with an ec2 bastion host that consul discovered

    # EC2 Consul Client Example
    The full ssh command to connect the ec2 bastion host is available in the terraform output.  Copy this output to SSH to the bastion host and review its configuration.
    ```
    terraform output ec2_ip
    ```
    Review the following configurations to see how easy you can add ec2 services to consul
    * Consul Systemd: /etc/systemd/system/consul.service
    * Consul Client: /etc/consul.d/consul.hcl
    * Consul Service Definition: /etc/consul.d/ec2-bastion-svc.json
  notes:
  - type: text
    contents: |-
      In this assignment you will familiarize yourself with the AWS cloud
      environment, and provision a consul server using Hashicorp best practices.
  tabs:
  - title: Terminal
    type: terminal
    hostname: vm
  - title: Code
    type: code
    hostname: vm
    path: /root/consul
  - title: Architecture
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/ppresto/instruqt-tracks/main/consul-aws-ecs/assets/diagrams/consul-aws-consul.html
  - title: AWS Console
    type: service
    hostname: vm
    path: /
    port: 80
  difficulty: basic
  timelimit: 1800
- slug: build-consul-ecs-agent
  id: dmteuxtrwst0
  type: challenge
  title: Build a Consul service registration sidecar container
  teaser: Build a sidecar container that can support both service discovery and service
    mesh with envoy if needed.
  assignment: |-
    To host this container you will need a [dockerhub account](https://hub.docker.com/).
    If you dont already have one sign up for a free account now. <br>

    # Update DockerID
    Go to the `Code` tab or use vi to edit file: `Makefile`.
    Replace the DOCKER_ID (ex: ppresto) with your docker account name and save the file.

    # Docker Login
    Go to the `Docker` tab  and login to your dockerhub account.
    ```
    docker login
    ```

    # Build and Push Image
    ```
    make build
    make push
    ```

    # entrypoint.sh
    While the image is being built go to the Code tab
    and take a look at `entrypoint.sh` to see how new services will be registered.
    * Line: 218 - set_service_configuration()

    # Copy image REPOSITORY:TAG
    Copy the full image name because we need this for the next challenge.
    ```
    docker images --format "table {{.Repository}}:{{.Tag}}" | grep -v envoyproxy
    ```
  notes:
  - type: text
    contents: In this challenge you will build an init/sidecar image used to register
      services to consul.
  tabs:
  - title: Terminal
    type: terminal
    hostname: vm
  - title: Code
    type: code
    hostname: vm
    path: /root/consul-ecs-agent
  - title: AWS Console
    type: service
    hostname: vm
    path: /
    port: 80
  difficulty: basic
  timelimit: 1800
- slug: build-ecs-cluster
  id: vdd2lma8ryhh
  type: challenge
  title: Provision ECS Cluster on EC2
  teaser: Use Terraform to provision an ECS Cluster and deploy Hashicups
  assignment: |-
    # my.auto.tfvars
    In the Code tab verify `my.auto.tfvars`
    * consul_ecs_agent_image_name=<YOUR_DOCKER_REPOSITORY:TAG>
    * cluster_name=<OPTIONAL_CUSTOM_NAME>

    If you forgot your docker repo:tag you can run `docker images` to gather that information.

    # Provision the ECS Cluster
    Go to the Terminal tab and execute the following
    ```
    terraform init
    terraform apply -auto-approve
    ```

    # Login to AWS Consoles
    Go to the Cloud Consoles Tab while you wait for the cluster to provision
    * Copy the `Username` by clicking on the copy icon to the right
    * Click on the `Account ID` to bring up a new browser tab and copy the username into the Login page
    * Copy the `Password` by clicking on the copy icon to the right and enter it into the Login page

    Once logged in bring up tabs for ECS, Cloudwatch, and anything else you want to monitor as the ECS cluster is provisioned and Hashicup services deployed.
    To review all task logs in Cloudwatch go to Logs -> Log groups -> applogs.  Creating the ECS instance and deploying services usually takes a couple minutes so please be patient.

    # Order coffee from Hashicups
    To go to the web application review the terraform output, look for the ALB URL for the frontend, and copy/paste in a new browser tab.
    ```
    terraform output alb_hc_frontend
    ```
    You should see the Hashicups application load and be able to order a Packer Spiced Latte!
  notes:
  - type: text
    contents: |-
      In this assignment you will build an immutable image of Consul with [HashiCorp Packer](https://packer.io/). <br>

      Immutability has many advantages for infrastructure management.
      Consul Enterprise can take advantage of immutable patterns with [Automated Upgrades](https://www.consul.io/docs/enterprise/upgrades/index.html).
  tabs:
  - title: Terminal
    type: terminal
    hostname: vm
  - title: Code
    type: code
    hostname: vm
    path: /root/ecs
  - title: Architecture
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/ppresto/instruqt-tracks/main/consul-aws-ecs/assets/diagrams/consul-aws-consul-ecs-ec2.html
  - title: AWS Console
    type: service
    hostname: vm
    path: /
    port: 80
  difficulty: basic
  timelimit: 1800
- slug: sandbox
  id: abnujsmdzczv
  type: challenge
  title: Consul Sanbox
  teaser: Use this sandbox to test various Consul use cases.
  assignment: |-
    To make changes  use the Code and Terminal tabs.

    # Quick Reference

    Application URL:
    ```
    cd /root/ecs
    terraform output alb_hc_frontend
    ```

    Consul URL
    ```
    cd /root/consul
    terraform output dns_name
    ```

    SSH EC2 bastion host
    ```
    cd /root/consul
    terraform output ec2_ip
    ```
  notes:
  - type: text
    contents: In this assignment, you are free to do your own consul validation. <br>
  tabs:
  - title: AWS Console
    type: service
    hostname: vm
    path: /
    port: 80
  - title: Code
    type: code
    hostname: vm
    path: /root
  - title: Terminal-1
    type: terminal
    hostname: vm
  - title: Terminal-2
    type: terminal
    hostname: vm
  - title: Terminal-3
    type: terminal
    hostname: vm
  difficulty: basic
  timelimit: 1800
checksum: "10532092229769977768"

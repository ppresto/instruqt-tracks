slug: consul-aws-ecs-poc
id: enlpvazu1tqe
type: track
title: Consul on AWS
teaser: Consul as a Shared Service on AWS with Consul Enterprise
description: In this track you will set up a Consul shared service on AWS, and connect
  applications across multiple platforms.
icon: https://storage.googleapis.com/instruqt-frontend/assets/hashicorp/tracks/consul.png
tags: []
owner: hashicorp
developers:
- ppresto@hashicorp.com
private: true
published: false
show_timer: true
challenges:
- slug: provision-consul
  id: uyjxdvqk2pbc
  type: challenge
  title: 'Infrastructure: Use Terraform to provision the Consul, & ECS Cluster'
  teaser: Create Consul and ECS Cluster with Terraform
  assignment: |-
    You can think of the Cloud CLI terminal as your laptop machine preloaded with your AWS access credentials. <br>
    At any time you can use the AWS CLI and console to view your environment. <br>

    # Step 1: Provision Consul
    Inspect the Terraform code, and then provision the Consul Cluster.

    ```
    cd /root/consul
    terraform init
    terraform apply -auto-approve
    ```
  notes:
  - type: text
    contents: |-
      In this assignment you will familiarize yourself with the AWS cloud
      environment, and provision consul.
  tabs:
  - title: Cloud CLI
    type: terminal
    hostname: cloud-client
  - title: Cloud Consoles
    type: service
    hostname: cloud-client
    path: /
    port: 80
  - title: Current lab setup
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/ppresto/instruqt-tracks/master/consul-aws-ecs/assets/diagrams/03-provision-consul.html
  - title: Terraform
    type: code
    hostname: cloud-client
    path: /root/terraform
  difficulty: basic
  timelimit: 1800
- slug: build-consul-ecs-agent
  id: dmteuxtrwst0
  type: challenge
  title: Init/Sidecar Service Registration
  teaser: To register our ECS services we need to build an init container
  assignment: |-
    To Use this container you will need a [https://hub.docker.com/](dockerhub account). <br>

    Replace the IMAGE_NAME (ex: ppresto/consul-ecs) with your docker account name
    ```
    vi Makefile
    ```

    Build and push your image
    ```
    make build
    make push
    ```
  notes:
  - type: text
    contents: In this challenge you will build an init/sidecar image used to register
      services to consul.
  tabs:
  - title: Terminal
    type: terminal
    hostname: cloud-client
  - title: Cloud Consoles
    type: service
    hostname: cloud-client
    path: /
    port: 80
  - title: Code
    type: code
    hostname: cloud-client
    path: /root/ecs
  difficulty: basic
  timelimit: 1800
- slug: build-ecs-cluster
  id: vdd2lma8ryhh
  type: challenge
  title: ECS Cluster
  teaser: Use Terraform to build and deploy Hashicups in ECS
  assignment: |-
    Update the cluster_name in my.auto.tfvars and verify the region is correct.
    ```
    vi my.auto.tfvars
    ```

    Provision the ECS Cluster
    ```
    terraform init
    terraform apply -auto-approve
    ```
  notes:
  - type: text
    contents: |-
      In this assignment you will build an immutable image of Consul with [HashiCorp Packer](https://packer.io/). <br>

      Immutability has many advantages for infrastructure management.
      Consul Enterprise can take advantage of immutable patterns with [Automated Upgrades](https://www.consul.io/docs/enterprise/upgrades/index.html).
  tabs:
  - title: Editor
    type: code
    hostname: cloud-client
    path: /root/ecs
  - title: Terminal
    type: terminal
    hostname: cloud-client
  - title: Cloud Consoles
    type: service
    hostname: cloud-client
    path: /
    port: 80
  difficulty: basic
  timelimit: 1800
- slug: sandbox
  id: abnujsmdzczv
  type: challenge
  title: Test Consul features
  teaser: sky is the limit
  assignment: Please go back and stop the track once you are done to free up resources.
  notes:
  - type: text
    contents: In this assignment, you are free to do your own consul validation. <br>
  tabs:
  - title: Code
    type: code
    hostname: cloud-client
    path: /root
  - title: Cloud CLI
    type: terminal
    hostname: cloud-client
  - title: Cloud Consoles
    type: service
    hostname: cloud-client
    path: /
    port: 80
  difficulty: basic
  timelimit: 1800
checksum: "7383209503090712852"

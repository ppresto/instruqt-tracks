#!/bin/bash -l
set -e

# wait for AWS Credentials
sleep 20

CONSUL_VER=1.8.0

#install terraform
cd /tmp
echo "installing terraform..."
curl -O https://releases.hashicorp.com/terraform/0.13.5/terraform_0.13.5_linux_amd64.zip
unzip terraform_0.13.5_linux_amd64.zip
mv terraform /usr/local/bin/terraform
rm -f terraform_0.13.5_linux_amd64.zip

# env
export AWS_REGION=us-west-2

# path
echo "export PATH=/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" >> ~/.bashrc
echo "export AWS_REGION=${AWS_REGION}" >> ~/.bashrc


echo "Installing AWS CLI"
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
rm -rf aws awscliv2.zip

# aws cli
aws configure set default.region ${AWS_REGION}
aws ec2 create-default-vpc

#ssh
aws ec2 import-key-pair --key-name "instruqt" --public-key-material fileb://~/.ssh/id_rsa.pub
eval `ssh-agent -s`

cat << EOF > ~/.ssh/config
Host *
    StrictHostKeyChecking no
EOF

#
### Install Consul CLI
#
echo "installing consul..."
cd /tmp && {
    if [[ ! -f consul_${CONSUL_VER}+ent_linux_amd64.zip ]]; then
        curl -O https://releases.hashicorp.com/consul/${CONSUL_VER}+ent/consul_${CONSUL_VER}+ent_linux_amd64.zip
        mv consul_${CONSUL_VER}+ent_linux_amd64.zip consul.zip
    fi
    unzip -qq "consul.zip"
    sudo mv "consul" "/usr/local/bin/consul"
    sudo chmod +x "/usr/local/bin/consul"
    rm -rf "consul.zip"
  }

#
### Install Vault
#
echo "installing vault..."
cd /tmp && {
    if [[ ! -f vault_1.6.3_linux_amd64.zip ]]; then
        curl -O https://releases.hashicorp.com/vault/1.6.3/vault_1.6.3_linux_amd64.zip
        mv vault_1.6.3_linux_amd64.zip vault.zip
    fi
    unzip -qq "vault.zip"
    sudo mv "vault" "/usr/local/bin/vault"
    sudo chmod +x "/usr/local/bin/vault"
    rm -rf "vault.zip"
  }


mkdir -p /root/aws
set-workdir /root/aws
cd /root/aws
echo "cloning assets..."
git clone -b acl https://github.com/ppresto/instruqt-tracks.git
#git clone https://github.com/ppresto/instruqt-tracks.git
cp -r instruqt-tracks/consul-aws-ecs/assets/consul .
cp -r instruqt-tracks/consul-aws-ecs/assets/packer .
cp -r instruqt-tracks/consul-aws-ecs/assets/vpc .
cp -r instruqt-tracks/consul-aws-ecs/assets/ecs .
cp -r instruqt-tracks/consul-aws-ecs/assets/consul-ecs-agent .
cp -r instruqt-tracks/consul-aws-ecs/assets/vault .
rm -rf instruqt-tracks

# create image
cd /root/aws/packer/consul
./run-linux.sh > packer.out &


#provision vpc
cd /root/aws/vpc
echo "Provision VPC ..."
/usr/local/bin/terraform init
/usr/local/bin/terraform apply -auto-approve > tf.out

# Start up Visual Studio Code server
# Create VSC startup script
cat <<-EOF > /etc/systemd/system/code-server.service
[Unit]
Description=Code Server
After=network.target
StartLimitIntervalSec=0

[Service]
Type=simple
Restart=always
RestartSec=1
User=root
ExecStart=/usr/bin/code-server --host 0.0.0.0 --port 8443 --cert --auth none /root/aws/consul

[Install]
WantedBy=multi-user.target
EOF

# Add AWS keys to systemd environment
systemctl import-environment AWS_ACCESS_KEY_ID
systemctl import-environment AWS_SECRET_ACCESS_KEY

# Wait for AMI to be available
until aws ec2 describe-images --region ${AWS_REGION} --filters "Name=tag:Owner,Values=ppresto@hashicorp.com" --output text | grep is-immutable-consul; do
    echo "Waiting for AWS AMI to be available"
    sleep 1
done

#provision consul
cd /root/aws/consul
echo "Provision Consul ..."
/usr/local/bin/terraform init
/usr/local/bin/terraform apply -auto-approve > tf.out

#if [[ $(terraform output dns_name| grep "amazonaws.com") ]]; then
#    until curl -s -m 5 $(terraform output dns_name); do
#        echo "Waiting for consul URL to be available..."
#        sleep 5
#    done
#fi

NEXT_WAIT_TIME=0
until [ $NEXT_WAIT_TIME -eq 10 ] || curl -s -m 5 $(terraform output dns_name); do
    echo "Waiting $((NEXT_WAIT_TIME+1)) sec for $(terraform output dns_name)"
    sleep $(( NEXT_WAIT_TIME++ ))
done

#Initialize Vault
vault_lb=$(terraform output -state /root/aws/consul/terraform.tfstate vault_url)
export VAULT_ADDR=http://${vault_lb}
master_token=$(terraform output -state /root/aws/consul/terraform.tfstate master_token)
agent_server_token=$(terraform output -state /root/aws/consul/terraform.tfstate agent_server_token)
gossip_key=$(terraform output -state /root/aws/consul/terraform.tfstate gossip_key)
snapshot_token=$(terraform output -state /root/aws/consul/terraform.tfstate snapshot_token)

vault login root
vault kv put secret/consul master_token=${master_token} agent_server_token=${agent_server_token} snapshot_token=${snapshot_token} gossip_key=${gossip_key}

vault auth enable userpass
vault write auth/userpass/users/operations password=Password1 policies=ops token_ttl=8h
vault secrets enable consul

echo 'path "secret/*" {
  capabilities = ["list"]
}
path "secret/data/consul" {
  capabilities = ["create", "read", "update", "delete", "list"]
}
path "consul/*"
{
  capabilities = ["create", "read", "update", "delete"]
}' | vault policy write ops -

unset VAULT_TOKEN

vault login -method=userpass username=operations password=Password1

export CONSUL_HTTP_TOKEN=$(vault kv get -field=master_token secret/consul)
vault_consul_mgmt_token=$(consul acl token create -policy-name=global-management -description "vault mgmt" | grep SecretID | cut -d ":" -f2 | xargs)
vault write consul/config/access address="${CONSUL_HTTP_ADDR}" token=${vault_consul_mgmt_token}


consul acl policy create -name "ops" -description "admin policy for ops" -rules 'acl = "write" operator = "write" namespace_prefix "" {acl = "write"}'
vault write consul/roles/ops policies=ops ttl=1h

# Get dynamically generated "ops" consul token from Vault. This policy allows for ACL creation
export CONSUL_HTTP_TOKEN=$(vault read -field token consul/creds/ops)

# Setup Anonymous Policy
echo '
    node_prefix "" {
      policy = "read"
    }
    session_prefix "" {
      policy = "read"
    }
    agent_prefix "" {
      policy = "read"
    }
    query_prefix "" {
      policy = "read"
    }
    operator = "read"
    namespace_prefix "" {
      acl = "read"
      intention = "read"
      service_prefix "" {
        policy = "read"
      }
      node_prefix "" {
        policy = "read"
      }
    }' |  consul acl policy create -name anonymous -rules -
    consul acl token update -id anonymous -policy-name anonymous


echo '
  service_prefix "" {
    policy = "write"
  }' | consul acl policy create -name "svc-policy" -description "Write policy for any service" -rules -

vault kv patch secret/consul svc_token=$(consul acl token create -description 'generic service write' -policy-name 'svc-policy' -format=json | jq -r .SecretID)

# Set Env
echo "Setup profile"
cat <<PROFILE | sudo tee /etc/profile.d/consul.sh
export CONSUL_HTTP_ADDR=$(terraform output -state /root/aws/consul/terraform.tfstate dns_name)
export CONSUL_HTTP_TOKEN=$(terraform output -state /root/aws/consul/terraform.tfstate master_token)
export VAULT_ADDR=http://${vault_lb}
PROFILE
#aws ec2 describe-images --owners self
#aws ec2 describe-images --region ${AWS_REGION} --filters "Name=tag:Owner,Values=ppresto@hashicorp.com" --output text

# Start VS Code
systemctl enable code-server
systemctl start code-server

exit 0
